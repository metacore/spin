38d38
< #include "profiling_obj_fmt_sw.h"
40a41,42
> extern char *defaultEs[];
> extern struct nl *defaultEnl[];
45,63c47,117
< 	/* 
< 	 * This function calls through a switch to extract information from
< 	 * the object file.  The list of supported object formats is
< 	 * determined by files in the machine-dependent subdirectories.
< 	 * machdep.mk lists the format types as well as the names of the
< 	 * .o files needed to support them.  gprof_obj_fmt_sw.h contains
< 	 * the declaration of the object info switch.  The switch is
< 	 * initialized with the addresses of the format-dependent functions
< 	 * for all the supported object formats.
< 	 */
< 
< 	int		i, our_fmt, getnfile_ok;
< 	FILE		*fd;
< 	struct stat	stat_buf;
< 	void		*handle;
< 
< 	if (stat( a_outname, &stat_buf ) != 0) {
< 		perror(a_outname);
< 		done();
---
>     /* SPIN: The real gprof code which reads COFF files has been removed.
>      * We will read in our own simple files containing symbol names and
>      * values. 
>      */
> 
>     FILE *fd;
>     struct stat stat_buf;
>     long name_ind;
>     long name_buffer_len;
>     long nsyms;
>     int i;
>     int valcmp();
>     char **dE;
>     int index;
> 
>     if (stat( a_outname, &stat_buf ) != 0) {
> 	perror(a_outname);
> 	done();
>     }
>     if ((fd = fopen( a_outname, "r" )) == NULL) {
> 	fprintf(stderr,
> 		MSGSTR(OPENFILE, "%s:  Cannot open file %s.\n"),
> 		whoami, a_outname);
> 	done();
>     }
> 
>     fread((void*) &nsyms, sizeof(long), 1, fd);
>     nname = nsyms;
>     fread((void*) &name_buffer_len, sizeof(long), 1, fd);
> 
>     /* Symbol names are kept in this table */
>     strtab = (char*) malloc(name_buffer_len);
>     if (strtab == 0) {
> 	fprintf(stderr,
> 		MSGSTR(NOROOM,
> 		       "%s: No room for %d bytes of string table\n"),
> 		whoami, name_buffer_len );
> 	return;
>     }
> 
>     nl = (nltype*) calloc(nname, sizeof(nltype));
>     if (nl == 0) {
> 	fprintf(stderr,
> 		MSGSTR(NOROOM,
> 		       "%s: No room for %d bytes of symbol table\n"),
> 		whoami, nname * sizeof(nltype) );
> 	return;
>     }
> 
>     fread((void*) strtab, sizeof(char), name_buffer_len, fd);
> 
>     for (i=0; i<nname; i++) {
> 	fread((void*) &name_ind, sizeof(long), 1, fd);
> 	nl[i].name = &strtab[name_ind];
> 	fread((void*) &nl[i].value, sizeof(unsigned long), 1, fd);
>     }
> 
>     fclose( fd );
> 
>     npe = &nl[nname];
> 
>     qsort(nl, nname, sizeof(nltype), valcmp);
> 
>     for (i=0; i<nname; i++) {
> 	/* Chop out the names of the profiling procedures themselves. */
> 	for (dE = &defaultEs[0], index = 0; *dE; dE++,index++) {
> 	    if (defaultEnl[index] != NULL) continue;
> 	    if (!strcmp(nl[i].name, *dE)) {
> 		defaultEnl[index] = &nl[i];
> 		break;
> 	    }
65,94c119
< 	if ((fd = fopen( a_outname, "r" )) == NULL) {
< 		fprintf(stderr,
< 			MSGSTR(OPENFILE, "%s:  Cannot open file %s.\n"),
< 			whoami, a_outname);
< 		done();
< 	}
< 
< 	our_fmt = -1;
< 	for (i = 0; i < N_FMTS; i++) {
< 		fseek(fd, 0, 0);	/* start from beginning each time */
< 		if (((*fmt_switch[i].recognizer)(fd, a_outname, &handle))) {
< 			our_fmt = i;
< 			break;
< 		}
< 	}
< 	if (our_fmt < 0) {
< 		fprintf(stderr,
< 			MSGSTR(FORMAT,
< 			       "%s:  Cannot recognize format of %s.\n"),
< 			whoami, a_outname );
< 		fclose( fd);
< 		done();
< 	}
< 	getnfile_ok = 0;
< 	getnfile_ok = (*fmt_switch[our_fmt].getnfile)( handle );
< 	(*fmt_switch[our_fmt].close)( handle );
< 	fclose( fd );
< 
< 	if (!getnfile_ok)
< 		done();
---
>     }
