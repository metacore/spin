# Top level makefile fragment for GNU C++.
#   Copyright (C) 1994 Free Software Foundation, Inc.

#This file is part of GNU CC.

#GNU CC is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2, or (at your option)
#any later version.

#GNU CC is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with GNU CC; see the file COPYING.  If not, write to
#the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

# This file provides the language dependent support in the main Makefile.
# Each language makefile fragment must provide the following targets:
#
# foo.all.build, foo.all.cross, foo.start.encap, foo.rest.encap,
# foo.info, foo.dvi,
# foo.install-normal, foo.install-common, foo.install-info, foo.install-man,
# foo.uninstall, foo.distdir,
# foo.mostlyclean, foo.clean, foo.distclean, foo.extraclean, foo.realclean,
# foo.stage1, foo.stage2, foo.stage3, foo.stage4
#
# where `foo' is the name of the language.
#
# It should also provide rules for:
#
# - making any compiler driver (eg: g++)
# - the compiler proper (eg: cc1plus)
# - define the names for selecting the language in LANGUAGES.

# Extra flags to pass to recursive makes.
CXX_FLAGS_TO_PASS = \
	"CXX_FOR_BUILD=$(CXX_FOR_BUILD)" \
	"CXXFLAGS=$(CXXFLAGS)" \
	"CXX_FOR_TARGET=$(CXX_FOR_TARGET)"

# Actual names to use when installing a native compiler.
CXX_INSTALL_NAME = c++
GXX_INSTALL_NAME = g++

# Actual names to use when installing a cross-compiler.
CXX_CROSS_NAME = $(target)-c++
GXX_CROSS_NAME = $(target)-g++


# Define the names for selecting c++ in LANGUAGES.
# Note that it would be nice to move the dependency on g++
# into the C++ rule, but that needs a little bit of work
# to do the right thing within all.cross.
C++ c++: cc1plus

# Create the compiler driver for g++.
g++: $(srcdir)/cp/g++.c $(CONFIG_H) $(LIBDEPS)
	$(CC) $(ALL_CFLAGS) $(INCLUDES) $(LDFLAGS) -o g++ $(srcdir)/cp/g++.c $(LIBS)

# Create a version of the g++ driver which calls the cross-compiler.
g++-cross: $(srcdir)/cp/g++.c
	$(CC) $(ALL_CFLAGS) $(INCLUDES) $(LDFLAGS) -o g++-cross \
	   -DGCC_NAME=\"$(GCC_CROSS_NAME)\" $(srcdir)/cp/g++.c version.o $(LIBS)

CXX_SRCS = $(srcdir)/cp/call.c $(srcdir)/cp/decl2.c \
 $(srcdir)/cp/except.c $(srcdir)/cp/input.c $(srcdir)/cp/pt.c \
 $(srcdir)/cp/spew.c $(srcdir)/cp/xref.c $(srcdir)/cp/class.c \
 $(srcdir)/cp/edsel.c $(srcdir)/cp/expr.c $(srcdir)/cp/lex.c \
 $(srcdir)/cp/ptree.c $(srcdir)/cp/tree.c $(srcdir)/cp/cvt.c \
 $(srcdir)/cp/errfn.c $(srcdir)/cp/gc.c $(srcdir)/cp/method.c \
 $(srcdir)/cp/search.c $(srcdir)/cp/typeck.c $(srcdir)/cp/decl.c \
 $(srcdir)/cp/error.c $(srcdir)/cp/init.c $(srcdir)/cp/parse.y \
 $(srcdir)/cp/sig.c $(srcdir)/cp/typeck2.c

cc1plus: $(P) $(CXX_SRCS) $(LIBDEPS) stamp-objlist c-common.o
	cd cp; $(MAKE) $(FLAGS_TO_PASS) $(CXX_FLAGS_TO_PASS) ../cc1plus

# Build hooks:

c++.all.build: g++
c++.all.cross: g++-cross
c++.start.encap: g++
c++.rest.encap:

c++.info:
c++.dvi:

# Install hooks:
# cc1plus is installed elsewhere as part of $(COMPILERS).

# Nothing to do here.
c++.install-normal:

# Install the driver program as $(target)-g++
# and also as either g++ (if native) or $(tooldir)/bin/g++.
c++.install-common:
	-if [ -f cc1plus ] ; then \
	  if [ -f g++-cross ] ; then \
	    rm -f $(bindir)/$(GXX_CROSS_NAME); \
	    $(INSTALL_PROGRAM) g++-cross $(bindir)/$(GXX_CROSS_NAME); \
	    chmod a+x $(bindir)/$(GXX_CROSS_NAME); \
	    rm -f $(bindir)/$(CXX_CROSS_NAME); \
	    ln $(bindir)/$(GXX_CROSS_NAME) $(bindir)/$(CXX_CROSS_NAME); \
	  else \
	    rm -f $(bindir)/$(GXX_INSTALL_NAME); \
	    $(INSTALL_PROGRAM) g++ $(bindir)/$(GXX_INSTALL_NAME); \
	    chmod a+x $(bindir)/$(GXX_INSTALL_NAME); \
	    rm -f $(bindir)/$(CXX_INSTALL_NAME); \
	    ln $(bindir)/$(GXX_INSTALL_NAME) $(bindir)/$(CXX_INSTALL_NAME); \
	  fi ; \
	fi

c++.install-info:

c++.install-man: $(srcdir)/cp/g++.1
	-if [ -f cc1plus ] ; then \
	  $(INSTALL_DATA) $(srcdir)/cp/g++.1 $(mandir)/g++$(manext) ; \
	  chmod a-x $(mandir)/g++$(manext) ; \
	else true; fi

c++.uninstall:
	-rm -rf $(bindir)/$(CXX_INSTALL_NAME)
	-rm -rf $(bindir)/$(CXX_CROSS_NAME)
	-rm -rf $(bindir)/$(GXX_INSTALL_NAME)
	-rm -rf $(bindir)/$(GXX_CROSS_NAME)
	-rm -rf $(mandir)/g++$(manext)

# Clean hooks:
# A lot of the ancillary files are deleted by the main makefile.
# We just have to delete files specific to us.

c++.mostlyclean:
	-rm -f cp/*.o
c++.clean:
c++.distclean:
	-rm -f cp/config.status cp/Makefile
	-rm -f cp/parse.output
c++.extraclean:
c++.realclean:
	-rm -f cp/parse.c cp/parse.h

# Stage hooks:
# The main makefile has already created stage?/cp.

c++.stage1:
	-mv cp/*.o stage1/cp
c++.stage2:
	-mv cp/*.o stage2/cp
c++.stage3:
	-mv cp/*.o stage3/cp
c++.stage4:
	-mv cp/*.o stage4/cp

# Maintenance hooks:

# This target creates the files that can be rebuilt, but go in the
# distribution anyway.  It then copies the files to the distdir directory.
c++.distdir:
	mkdir tmp/cp
	cd cp ; $(MAKE) $(FLAGS_TO_PASS) $(CXX_FLAGS_TO_PASS) parse.c hash.h
	cd cp; \
	for file in *[0-9a-zA-Z+]; do \
	  ln $$file ../tmp/cp >/dev/null 2>&1 || cp $$file ../tmp/cp; \
	done
