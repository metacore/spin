#
# LINT -- config file for checking all the sources, tries to pull in
#	as much of the source tree as it can.
#
#	$Id: LINT,v 1.2 1997/01/31 15:59:29 mef Exp $
#
# NB: You probably don't want to try running a kernel built from this
# file.  Instead, you should start from GENERIC, and add options from
# this file as required.
#

#
# This directive is mandatory; it defines the architecture to be
# configured for; in this case, the 386 family.  You must also specify
# at least one CPU (the one you intend to run on); deleting the
# specification for CPUs you don't need to use may make parts of the
# system run faster
#
machine		"i386"
cpu		"I386_CPU"
cpu		"I486_CPU"
cpu		"I586_CPU"		# aka Pentium(tm)

# 
# This is the ``identification'' of the kernel.  Usually this should
# be the same as the name of your kernel.
#
ident		LINT

#
# The `maxusers' parameter controls the static sizing of a number of
# internal system tables by a complicated formula defined in param.c.
#
maxusers	10

#
# Under some circumstances it is necessary to make the default max
# number of processes per user and open files per user more than the
# defaults on bootup.  (an example is a large news server in which
# the uid, news, can sometimes need > 100 simultaneous processes running,
# or perhaps a user using lots of windows under X).
options		"CHILD_MAX=128"
options		"OPEN_MAX=128"

#
# A math emulator is mandatory if you wish to run on hardware which
# does not have a floating-point processor.  Pick either the original,
# bogus (but freely-distributable) math emulator, or a much more
# fully-featured but GPL-licensed emulator taken from Linux.
#
options		MATH_EMULATE		#Support for x87 emulation
#options        GPL_MATH_EMULATE        #Support for x87 emualtion via
                                        #new math emulator 

#
# This directive defines a number of things:
#  - The compiled kernel is to be called `kernel'
#  - The root filesystem might be on partition wd0a
#  - Crash dumps will be written to wd0b, if possible.  Specifying the
#    dump device here is not recommended.  Use dumpon(8).
#
config		kernel	root on wd0 dumps on wd0


#####################################################################
# COMPATIBILITY OPTIONS                                             

#
# Implement system calls compatible with 4.3BSD and older versions of
# FreeBSD.
#
options		"COMPAT_43"

#
# Allow user-mode programs to manipulat their local descriptor tables.
# This option is required for the WINE Windows(tm) emulator, and is
# not used by anything else (that we know of).
#
options		USER_LDT		#allow user-level control of i386 ldt

#
# These three options provide support for System V Interface
# Definition-style interprocess communication, in the form of shared
# memory, semaphores, and message queues, respectively.
#
options		SYSVSHM
options		SYSVSEM
options		SYSVMSG


#####################################################################
# DEBUGGING OPTIONS

#
# Enable the kernel debugger.
#
options		DDB

# 
# KTRACE enables the system-call tracing facility ktrace(2).
#
options		KTRACE			#kernel tracing

#
# The DIAGNOSTIC option is used in a number of source files to enable
# extra sanity checking of internal structures.  This support is not
# enabled by default because of the extra time it would take to check
# for these conditions, which can only occur as a result of
# programming errors.
#
options		DIAGNOSTIC

#
# Allow ordinary users to take the console - this is useful for X.
options		UCONSOLE

# XXX - this doesn't belong here either
options		USERCONFIG		#boot -c editor
options		VISUAL_USERCONFIG	#visual boot -c editor

#####################################################################
# NETWORKING OPTIONS

#
# Protocol families:
#  Only the INET (Internet) family is officially supported in FreeBSD.
#  Source code for the NS (Xerox Network Service), ISO (OSI), and
#  CCITT (X.25) families is provided for amusement value, although we
#  try to ensure that it actually compiles.
#
options		INET			#Internet communications protocols
options		CCITT			#X.25 network layer
options		NS			#Xerox NS communications protocols

# These are currently broken and don't compile
#options		ISO
#options		TPIP			#ISO TP class 4 over IP
#options		TPCONS			#ISO TP class 0 over X.25

#
# Network interfaces:
#  The `loop' pseudo-device is mandatory when networking is enabled.
#  The `ether' pseudo-device provides generic code to handle
#  Ethernets; it is mandatory when a Ethernet device driver is
#  configured.
#  The 'fddi' pseudo-device provides generic code to support FDDI.
#  The `sppp' pseudo-device serves a similar role for certain types
#  of synchronous PPP links (like `cx').
#  The `sl' pseudo-device implements the Serial Line IP (SLIP) service.
#  The `ppp' pseudo-device implements the Point-to-Point Protocol.
#  The `bpfilter' pseudo-device enables the Berkeley Packet Filter.  Be
#  aware of the legal and administrative consequences of enabling this
#  option.  The number of devices determines the maximum number of
#  simultaneous BPF clients programs runnable.
#  The `disc' pseudo-device implements a minimal network interface,
#  which throws away all packets sent and never receives any.  It is
#  included for testing purposes.
#  The `tun' pseudo-device implements the User Process PPP (iijppp)
#
pseudo-device	ether			#Generic Ethernet
pseudo-device	fddi			#Generic FDDI
pseudo-device	sppp			#Generic Synchronous PPP
options		USERCONFIG_BOOT		#imply -c and parse info area
pseudo-device	loop			#Network loopback device
pseudo-device	sl	2		#Serial Line IP
pseudo-device	ppp	2		#Point-to-point protocol
pseudo-device	bpfilter	4	#Berkeley packet filter
pseudo-device	disc			#Discard device
pseudo-device	tun	1		#Tunnel driver(user process ppp)

options		NSIP			#XNS over IP
options		LLC			#X.25 link layer for Ethernets
options		HDLC			#X.25 link layer for serial lines

# broken
#options		EON			#ISO CLNP over IP

#
# Internet family options:
#
# TCP_COMPAT_42 causes the TCP code to emulate certain bugs present in
# 4.2BSD.  This option should not be used unless you have a 4.2BSD
# machine and TCP connections fail.
#
# GATEWAY allows the machine to forward packets, and also configures
# larger static sizes of a number of system tables.
#
# MROUTING enables the kernel multicast packet forwarder, which works
# with mrouted(8).
#
# IPFIREWALL enables support for IP firewall construction, in
# conjunction with the `ipfw' program.  IPFIREWALL_VERBOSE does
# the obvious thing.
#
# ARP_PROXYALL enables global proxy ARP.  Beware!  This can burn
# your house down!  See netinet/if_ether.c for the gory details.
# (Eventually there will be a better management interface.)
#
options		"TCP_COMPAT_42"		#emulate 4.2BSD TCP bugs
options		GATEWAY			#internetwork gateway
options		MROUTING		# Multicast routing
options         IPFIREWALL              #firewall
options         IPFIREWALL_VERBOSE      #print information about
					# dropped packets
options		ARP_PROXYALL		# global proxy ARP


#####################################################################
# FILESYSTEM OPTIONS

#
# Only the root, /usr, and /tmp filesystems need be statically
# compiled; everything else will be automatically loaded at mount
# time.  (Exception: the UFS family---FFS, MFS, and LFS---cannot
# currently be demand-loaded.)  Some people still prefer to statically
# compile other filesystems as well.
#
# NB: The LFS, PORTAL, and UNION filesystems are known to be buggy,
# and WILL panic your system if you attempt to do anything with them.
# They are included here as an incentive for some enterprising soul to
# sit down and fix them.
#
# Note: 4.4BSD NQNFS lease checking has relatively high cost for
# _local_ I/O as well as remote I/O. Don't use it unless you will
# using NQNFS.
#

# One of these is mandatory:
options		FFS			#Fast filesystem
options		NFS			#Network File System

# The rest are optional:
options		NQNFS			#Enable NQNFS lease checking
options		"CD9660"		#ISO 9660 filesystem
options		FDESC			#File descriptor filesystem
options		KERNFS			#Kernel filesystem
options		LFS			#Log filesystem
options		MFS			#Memory File System
options		MSDOSFS			#MS DOS File System
options		NULLFS			#NULL filesystem
options		PORTAL			#Portal filesystem
options		PROCFS			#Process filesystem
options		UMAPFS			#UID map filesystem
options		UNION			#Union filesystem

# Make space in the kernel for a MFS rootfilesystem.  Define to the number
# of kilobytes to reserve for the filesystem.
options		"MFS_ROOT=10"

# Allow this many swap-devices.
options		"NSWAPDEV=20"

# Disk quotas are supported when this option is enabled.  If you
# change the value of this option, you must do a `make clean' in your
# kernel compile directory in order to get a working kernel.
#
options		QUOTA			#enable disk quotas


#####################################################################
# SCSI DEVICES

# SCSI DEVICE CONFIGURATION

# The SCSI subsystem consists of the `base' SCSI code, a number of
# high-level SCSI device `type' drivers, and the low-level host-adapter
# device drivers.  The host adapters are listed in the ISA and PCI
# device configuration sections below.
#
# Beginning with FreeBSD 2.0.5 you can wire down your SCSI devices so
# that a given bus, target, and LUN always come on line as the same
# device unit.  In earlier versions the unit numbers were assigned
# in the order that the devices were probed on the SCSI bus.  This
# means that if you removed a disk drive, you may have had to rewrite
# your /etc/fstab file, and also that you had to be careful when adding
# a new disk as it may have been probed earlier and moved your device
# configuration around.

# This old behavior is maintained as the default behavior.  The unit
# assignment begins with the first non-wired down unit for a device
# type.  For example, if you wire a disk as "sd3" then the first
# non-wired disk will be assigned sd4.

# The syntax for wiring down devices is:

# controller	scbus0 at ahc0		# Single bus device
# controller	scbus1 at ahc1 bus 0	# Single bus device
# controller	scbus3 at ahc2 bus 0	# Twin bus device
# controller	scbus2 at ahc2 bus 1	# Twin bus device
# disk 		sd0 at scbus0 target 0 unit 0
# disk		sd1 at scbus3 target 1
# disk		sd2 at scbus2 target 3
# tape		st1 at scbus1 target 6
# device	cd0 at scbus?

# "units" (SCSI logical unit number) that are not specified are
# treated as if specified as LUN 0.

# All SCSI devices allocate as many units as are required.

# The "unknown" device (uk? in pre-2.0.5) is now part of the base SCSI
# configuration and doesn't have to be explicitly configured.

controller	scbus0	#base SCSI code
device		ch0	#SCSI media changers
device		sd0	#SCSI disks
device		st0	#SCSI tapes
device		cd0	#SCSI CD-ROMs

# XXX
# The `od' driver is unsupported in 2.1-stable.  The SCSI subsystem
# here does not allow for SCSI type overrides (assigning a driver that
# differs from the type the SCSI device claims to be), thus it could
# not be tested on my reference SONY SMO drive.  -- joerg
#
# However, it will most likely work fine.
device		od0

# The previous devices (ch, sd, st, cd) are recognized by config.
# config doesn't (and shouldn't) know about these newer ones,
# so we have to specify that they are on a SCSI bus with the "at scbus?"
# clause.

#device worm0 at scbus?	# SCSI worm (CD-R) -- untested, but known to work
			# in the 2.2 development systems
			# NB: disabled by default since it doesn't work with the
			# popular HP drives.
device pt0 at scbus?	# SCSI processor type
device sctarg0 at scbus? # SCSI target

# SCSI OPTIONS:

# SCSIDEBUG: When defined enables debugging macros
# NO_SCSI_SENSE: When defined disables sense descriptions (about 4k)
# SCSI_REPORT_GEOMETRY: Always report disk geometry at boot up instead
#                       of only when booting verbosely.
options		SCSIDEBUG
#options	NO_SCSI_SENSE
options		SCSI_REPORT_GEOMETRY

# Options for the `od' optical disk driver:
#
# If drive returns sense key as 0x02 with vendor specific additional
# sense code (ASC) and additional sense code qualifier (ASCQ), or
# illegal ASC and ASCQ. This cause an error (NOT READY) and retrying.
# To suppress this, use the following option.
#
options		OD_BOGUS_NOT_READY
#
# For an automatic spindown, try this.  Again, preferrably as an
# option in your config file.
# WARNING!  Use at your own risk.  Joerg's ancient SONY SMO drive
# groks it fine, while Shunsuke's Fujitsu chokes on it and times
# out.
#
options		OD_AUTO_TURNOFF



#####################################################################
# MISCELLANEOUS DEVICES AND OPTIONS

#
# Of these, only the `log' device is truly mandatory.  The `pty'
# device usually turns out to be ``effectively mandatory'', as it is
# required for `telnetd', `rlogind', `screen', `emacs', and `xterm',
# among others.  The `isdn', `ii', `ity', `itel', and `ispy' devices
# are all required when ISDN support is used.
#
pseudo-device	pty	16	#Pseudo ttys - can go as high as 256
pseudo-device	speaker		#Play IBM BASIC-style noises out your speaker
pseudo-device	log		#Kernel syslog interface (/dev/klog)
pseudo-device	gzip		#Exec gzipped a.out's
pseudo-device	vn		#Vnode driver (turns a file into a device)
pseudo-device	snp	3	#Snoop device - to look at pty/vty/etc..
pseudo-device	ccd	4	#Concatenated disk driver

# These are non-optional for ISDN
pseudo-device   isdn
pseudo-device   ii      4
pseudo-device   ity     4
pseudo-device   itel    2       
pseudo-device   ispy    1       


#####################################################################
# HARDWARE DEVICE CONFIGURATION

# ISA and EISA devices:
# Currently there is no separate support for EISA.  There should be.
# Micro Channel is not supported at all.

#
# Mandatory ISA devices: isa, sc or vt, npx
#
controller	isa0

#
# Options for `isa':
#
# AUTO_EOI_1 enables the `automatic EOI' feature for the master 8259A
# interrupt controller.  This saves about 1.25 usec for each interrupt.
# No problems are known to be caused by this option.
#
# AUTO_EOI_2 enables the `automatic EOI' feature for the slave 8259A
# interrupt controller.  This saves about 1.25 usec for each interrupt.
# Automatic EOI is documented not to work for for the slave with the
# original i8259A, but it works for some clones and some integrated
# versions.
#
# BOUNCE_BUFFERS provides support for ISA DMA on machines with more
# than 16 megabytes of memory.  It doesn't hurt on other machines.
# Some broken EISA and VLB hardware may need this, too.
#
# DUMMY_NOPS disables extra delays for some bus operations.  The delays
# are mostly for older systems and aren't used consistently.  Probably
# works OK on most EISA bus machines.
#
# MAXMEM specifies the amount of RAM on the machine; if this is not
# specified, FreeBSD will read the amount of memory from the CMOS RAM,
# so the amount of memory will be limited to 64MB or 16MB depending on
# the BIOS.  The amount is in kilobytes, so for a machine with 128MB of
# RAM, it would be 131072 (128 * 1024).
#
# TUNE_1542 enables the automatic ISA bus speed selection for the
# Adaptec 1542 boards. Does not work for all boards, use it with caution.
#
# BROKEN_KEYBOARD_RESET disables the use of the keyboard controller to
# reset the CPU for reboot.  This is needed on some systems with broken
# keyboard controllers.
options		"AUTO_EOI_1"
#options	"AUTO_EOI_2"
options		BOUNCE_BUFFERS
options		"MAXMEM=(128*1024)"
#options	DUMMY_NOPS
#options        "TUNE_1542"
#options	"BROKEN_KEYBOARD_RESET"

# Enable this and PCVT_FREEBSD for pcvt vt220 compatible console driver
device		vt0	at isa? port "IO_KBD" tty irq 1 vector pcrint
options		"PCVT_FREEBSD=210"	# pcvt running on FreeBSD 2.0.5
options		XSERVER			# include code for XFree86
options		FAT_CURSOR		# start with block cursor
# This PCVT option is for keyboards such as those used on IBM ThinkPad laptops
options		PCVT_SCANSET=2		# IBM keyboards are non-std

# The syscons console driver (sco color console compatible) - default.
device		sc0	at isa? port "IO_KBD" tty irq 1 vector scintr

#
# Options for `sc':
#
# HARDFONTS allows the driver to load an ISO-8859-1 font to replace
# the default font in your display adapter's memory.
#
options		HARDFONTS
#
# MAXCONS is maximum number of virtual consoles, no more than 16
# default value: 12
#
options         "MAXCONS=16"

device		npx0	at isa? port "IO_NPX" irq 13 vector npxintr

#
# Optional ISA and EISA devices:
#

#
# SCSI host adapters:
#
# aha: Adaptec 154x
# ahb: Adaptec 174x (See Eisa and PCI section below)
# ahc: Adaptec 274x/284x/294x  (See Eisa and PCI section below)
# aic: Adaptec 152x and sound cards using the Adaptec AIC-6360 (slow!)
# bt: Most Buslogic controllers
# nca: ProAudioSpectrum cards using the NCR 5380 or Trantor T130
# uha: UltraStore 14F and 34F
# sea: Seagate ST01/02 8 bit controller (slow!)
# wds: Western Digital WD7000 controller (no scatter/gather!).
#
# Note that the order is important in order for Buslogic cards to be
# probed correctly.
#

controller	bt0	at isa? port "IO_BT0" bio irq ? vector bt_isa_intr
controller	aha0	at isa? port "IO_AHA0" bio irq ? drq 5 vector ahaintr
controller	uha0	at isa? port "IO_UHA0" bio irq ? drq 5 vector uhaintr
controller      aic0    at isa? port 0x340 bio irq 11 vector aicintr
controller	nca0	at isa? port 0x1f88 bio irq 10 vector ncaintr
controller	nca1	at isa? port 0x1f84
controller	nca2	at isa? port 0x1f8c
controller	nca3	at isa? port 0x1e88
controller	nca4	at isa? port 0x350 bio irq 5 vector ncaintr

controller	sea0	at isa? bio irq 5 iomem 0xdc000 iosiz 0x2000 vector seaintr
controller	wds0	at isa? port 0x350 bio irq 15 drq 6 vector wdsintr

#
# ST-506, ESDI, and IDE hard disks: `wdc' and `wd'
#
# NB: ``Enhanced IDE'' is NOT supported at this time.
#
# The flags fields are used to enable the multi-sector I/O and
# the 32BIT I/O modes.  The flags may be used in either the controller
# definition or in the individual disk definitions.  The controller
# definition is supported for the boot configuration stuff.
#
# Each drive has a 16 bit flags value defined:
#	The low 8 bits are the maximum value for the multi-sector I/O,
#	where 0xff defaults to the maximum that the drive can handle.
#	The high bit of the 16 bit flags (0x8000) allows probing for
#	32 bit transfers.
#
# The flags field for the drives can be specified in the controller
# specification with the low 16 bits for drive 0, and the high 16 bits
# for drive 1.
# e.g.:
#controller	wdc0	at isa? port "IO_WD1" bio irq 14 flags 0x00ff8004 vector wdintr
#
# specifies that drive 0 will be allowed to probe for 32 bit transfers and
# a maximum multi-sector transfer of 4 sectors, and drive 1 will not be
# allowed to probe for 32 bit transfers, but will allow multi-sector
# transfers up to the maximum that the drive supports.
#

#
controller	wdc0	at isa? port "IO_WD1" bio irq 14 vector wdintr
disk		wd0	at wdc0 drive 0
disk		wd1	at wdc0 drive 1
controller	wdc1	at isa? port "IO_WD2" bio irq 15 vector wdintr
disk		wd2	at wdc1 drive 0
disk		wd3	at wdc1 drive 1

#
# Options for `wdc':
#
# ATAPI enables the support for ATAPI-compatible IDE devices
#
options         ATAPI   #Enable ATAPI support for IDE bus

# IDE CD-ROM driver - requires wdc controller and ATAPI option
device          wcd0

#
# Standard floppy disk controllers and floppy tapes: `fdc', `fd', and `ft'
#
controller	fdc0	at isa? port "IO_FD1" bio irq 6 drq 2 vector fdintr
#
# Activate this line instead of the fdc0 line above if you happen to
# have an Insight floppy tape.  Probing them proved to be dangerous
# for people with floppy disks only, so it's "hidden" behind a flag:
#controller fdc0 at isa? port "IO_FD1" bio flags 1 irq 6 drq 2 vector fdintr

disk		fd0	at fdc0 drive 0
disk		fd1	at fdc0 drive 1
tape		ft0	at fdc0 drive 2


#
# Options for `fd':
#
# FDSEEKWAIT selects a non-default head-settle time (i.e., the time to
# wait after a seek is performed).  The default value (1/32 s) is
# usually sufficient.  The units are inverse seconds, so a value of 16
# here means to wait 1/16th of a second; you should choose a power of
# two.
#
options	FDSEEKWAIT="16"

#
# Other standard PC hardware: `lpt', `mse', `psm', `sio', etc.
#
# lpt: printer port
#	lpt specials:
#		port can be specified as ?, this will cause the driver to scan
#		the BIOS port list;
#		the irq and vector clauses may be omitted, this
#		will force the port into polling mode.
# mse: Logitech and ATI InPort bus mouse ports
# psm: PS/2 mouse port [note: conflicts with sc0/vt0, thus "conflicts" keywd]
# sio: serial ports (see sio(4))

device		lpt0	at isa? port? tty irq 7 vector lptintr
device		lpt1	at isa? port "IO_LPT3" tty irq 5 vector lptintr
device		mse0	at isa? port 0x23c tty irq 5 vector mseintr
device		psm0	at isa? port "IO_KBD" conflicts tty irq 12 vector psmintr
# Options for psm:
options		PSM_NO_RESET		#don't reset mouse hardware (some laptops)

device		sio0	at isa? port "IO_COM1" tty irq 4 vector siointr

# Options for sio:
options		COMCONSOLE		#prefer serial console to video console
options		COM_MULTIPORT		#code for some cards with shared IRQs
options		DSI_SOFT_MODEM		#code for DSI Softmodems
options		BREAK_TO_DEBUGGER	#a BREAK on a comconsole goes to 
					#DDB, if available.

#
# Network interfaces: `cx', `ed', `el', `ep', `ie', `is', `le', `lnc'
#
# cx: Cronyx/Sigma multiport sync/async (with Cisco or PPP framing)
# ed: Western Digital and SMC 80xx; Novell NE1000 and NE2000; 3Com 3C503
# el: 3Com 3C501 (slow!)
# ep: 3Com 3C509 (buggy)
# fe: Fujitsu MB86960A/MB86965A Ethernet
# fea: DEC DEFEA EISA FDDI adapter
# ie: AT&T StarLAN 10 and EN100; 3Com 3C507; unknown NI5210
# le: Digital Equipment EtherWorks 2 and EtherWorks 3 (DEPCA, DE100,
#     DE101, DE200, DE201, DE202, DE203, DE204, DE205, DE422)
# lnc: Lance/PCnet cards (Isolan, Novell NE2100, NE32-VL)
# ze: IBM/National Semiconductor PCMCIA ethernet controller.
# zp: 3Com PCMCIA Etherlink III (It does not require shared memory for
#     send/receive operation, but it needs 'iomem' to read/write the
#     attribute memory)
#

device cx0 at isa? port 0x240 net irq 15 drq 7 vector cxintr
device ed0 at isa? port 0x280 net irq 5 iomem 0xd8000 vector edintr
device eg0 at isa? port 0x310 net irq 5 vector egintr
device el0 at isa? port 0x300 net irq 9 vector elintr
device ep0 at isa? port 0x300 net irq 10 vector epintr
device fe0 at isa? port 0x240 net irq ? vector feintr
device fea0 at isa? net irq ? vector feaintr
device ie0 at isa? port 0x360 net irq 7 iomem 0xd0000 vector ieintr
device ix0 at isa? port 0x300 net irq 10 iomem 0xd0000 iosiz 32768 vector ixintr
device le0 at isa? port 0x300 net irq 5 iomem 0xd0000 vector le_intr
device lnc0 at isa? port 0x300 net irq 10 drq 0 vector lncintr
device ze0 at isa? port 0x300 net irq 5 iomem 0xd8000 vector zeintr
device zp0 at isa? port 0x300 net irq 10 iomem 0xd8000 vector zpintr

#
# ISDN drivers - `isdn'.
#
# Uncomment one (and only one) of the following two drivers for the appropriate
# ISDN device you have.  For more information on what's considered appropriate
# for your given set of circumstances, please read
# /usr/src/gnu/usr.sbin/isdn/docs/INSTALL.  It's a bit sparse at present, but
# it's the best we have right now.  The snic driver is also disabled at present,
# waiting for someone to upgrade the driver to 2.0 (it's in /sys/gnu/scsi/).
#
device nic0 at isa? port "IO_COM3" iomem 0xe0000 tty irq 9 vector nicintr
device nnic0 at isa? port 0x150 iomem 0xe0000 tty irq 12 vector nnicintr

#
# Audio drivers: `snd', `sb', `pas', `gus', `pca'
#
# snd: Voxware sound support code
# sb: SoundBlaster PCM - SoundBlaster, SB Pro, SB16, ProAudioSpectrum
# sbxvi: SoundBlaster 16
# sbmidi: SoundBlaster 16 MIDI interface
# pas: ProAudioSpectrum PCM and MIDI
# gus: Gravis Ultrasound - Ultrasound, Ultrasound 16, Ultrasound MAX
# gusxvi: Gravis Ultrasound 16-bit PCM	(do not use)
# mss: Microsoft Sound System
# opl: Yamaha OPL-2 and OPL-3 FM - SB, SB Pro, SB 16, ProAudioSpectrum
# uart: stand-alone 6850 UART for MIDI
# mpu: Roland MPU-401 stand-alone card
# 
# Beware!  The addresses specified below are also hard-coded in
# i386/isa/sound/sound_config.h.  If you change the values here, you
# must also change the values in the include file.
#
# pca: PCM audio through your PC speaker
#
# If you don't have a lpt0 device at IRQ 7, you can remove the
# ``conflicts'' specification in the appropriate device entries below.
#
# If you have a GUS-MAX card and want to use the CS4231 codec on the
# card the drqs for the gus max must be 8 bit (1, 2, or 3).
# 
# If you would like to use the full duplex option on the gus, then define
# flags to be the ``read dma channel''.
#
# options BROKEN_BUS_CLOCK	#PAS-16 isn't working and OPTI chipset
# options SYMPHONY_PAS		#PAS-16 isn't working and SYMPHONY chipset
# options EXCLUDE_SBPRO		#PAS-16
# options "SBC_IRQ=5"		#PAS-16. Must match irq on sb0 line.
# PAS16: The order of the pas0/sb0/opl0 is important since the
#	sb emulation is enabled in the pas-16 attach.
#
# The i386/isa/sound/sound.doc has more information.

# Controls all sound devices
controller	snd0
device pas0     at isa? port 0x388 irq 10 drq 6 vector pasintr
device sb0      at isa? port 0x220 irq 7 conflicts drq 1 vector sbintr
device sbxvi0   at isa? drq 5
device sbmidi0  at isa? port 0x330
device gus0 at isa? port 0x220 irq 12 drq 1 vector gusintr
#device gus0 at isa? port 0x220 irq 12 drq 1 flags 0x3 vector gusintr
device mss0 at isa? port 0x530 irq 10 drq 1 vector adintr
device opl0     at isa? port 0x388 conflicts
device mpu0     at isa? port 0x330 irq 6 drq 0
device uart0 at isa? port 0x330 irq 5 vector "m6850intr"

# Not controlled by `snd'
device pca0 at isa? port IO_TIMER1 tty

#
# Miscellaneous hardware:
#
# mcd: Mitsumi CD-ROM
# scd: Sony CD-ROM
# matcd: Matsushita/Panasonic CD-ROM
# wt: Wangtek and Archive QIC-02/QIC-36 tape drives
# ctx: Cortex-I frame grabber
# apm: Laptop Advanced Power Management (experimental)
# spigot: The Creative Labs Video Spigot video-aquisition board
# meteor: Matrox Meteor video capture board
# cy: Cyclades serial driver
# dgb: Digiboard PC/Xi and PC/Xe series driver (ALPHA QUALITY!)
# gp:  National Instruments AT-GPIB and AT-GPIB/TNT board
# asc: GI1904-based hand scanners, e.g. the Trust Amiscan Grey
# gsc: Genius GS-4500 hand scanner.
# joy: joystick
# labpc: National Instrument's Lab-PC and Lab-PC+
# rc: RISCom/8 multiport card
# tw: TW-523 power line interface for use with X-10 home control products
# si: Specialix SI/XIO 4-32 port terminal multiplexor
# stl: Stallion EasyIO and EasyConnection 8/32 (cd1400 based)
# stli: Stallion EasyConnection 8/64, ONboard, Brumby (intelligent)

#
# Notes on APM
#  Some APM implementations will not work with the `statistics clock'
#  enabled, so it's disabled by default if the APM driver is enabled.
#  However, this is not true for all laptops.  Try removing the option
#  APM_BROKEN_STATCLOCK and see if suspend/resume work
#

#
# Notes on the spigot:
#  The video spigot is at 0xad6.  This port address can not be changed.
#  The irq values may only be 10, 11, or 15
#  I/O memory is an 8kb region.  Possible values are:
#    0a0000, 0a2000, ..., 0fffff, f00000, f02000, ..., ffffff
#  Note that the start address must be on an even boundary.

# Notes on the Digiboard driver:
#
# The following flag values have special meanings:
#	0x01 - alternate layout of pins
#	0x02 - use the windowed PC/Xe in 64K mode

# Notes on the Specialix SI/XIO driver:
#  **This is NOT a Specialix supported Driver!**
#  The host card is memory, not IO mapped.
#  The Rev 1 host cards use a 64K chunk, on a 32K boundary.
#  The Rev 2 host cards use a 32K chunk, on a 32K boundary.
#  The cards can use an IRQ of 11, 12 or 15.

# Notes on the Stallion stl and stli drivers:
#  See src/i386/isa/README.stl for complete instructions.
#  This is version 0.0.5alpha, unsupported by Stallion.
#  The stl driver has a secondary IO port hard coded at 0x280.  You need
#     to change src/i386/isa/stallion.c if you reconfigure this on the boards.
#  The "flags" and "iosiz" settings on the stli driver depend on the board:
#	EasyConnection 8/64 ISA:     flags 23         iosiz 0x1000
#	EasyConnection 8/64 EISA:    flags 24         iosiz 0x10000
#	EasyConnection 8/64 MCA:     flags 25         iosiz 0x1000
#	ONboard ISA:                 flags 4          iosiz 0x10000
#	ONboard EISA:                flags 7          iosiz 0x10000
#	ONboard MCA:                 flags 3          iosiz 0x10000
#	Brumby:                      flags 2          iosiz 0x4000
#	Stallion:                    flags 1          iosiz 0x10000

device		mcd0	at isa? port 0x300 bio irq 10 vector mcdintr
# for the Sony CDU31/33A CDROM
device		scd0	at isa? port 0x230 bio
# for the soundblaster 16 multicd - up to 4 devices
controller      matcd0  at isa? port 0x230 bio
device		wt0	at isa? port 0x300 bio irq 5 drq 1 vector wtintr
device		ctx0	at isa? port 0x230 iomem 0xd0000
device		spigot0 at isa? port 0xad6 irq 15 iomem 0xee000 vector spigintr
device		qcam0	at isa? port "IO_LPT3" tty
device		apm0	at isa?
options		APM_BROKEN_STATCLOCK
device		gp0	at isa? port 0x2c0 tty
device		gsc0	at isa? port "IO_GSC1" tty drq 3
device		joy0	at isa? port "IO_GAME"
device		cy0	at isa? tty irq 10 iomem 0xd4000 iosiz 0x2000 vector cyintr
device		dgb0	at isa? port 0x220 iomem 0xfc0000 iosiz ? tty
device		labpc0	at isa? port 0x260 tty irq 5 vector labpcintr
device          rc0     at isa? port 0x220 tty irq 12 vector rcintr
# the port and irq for tw0 are fictitious
device          tw0     at isa? port 0x380 tty irq 11 vector twintr
device		si0	at isa? iomem 0xd0000 tty irq 12 vector siintr
device		asc0	at isa? port IO_ASC1 tty drq 3 irq 10 vector ascintr
device		stl0	at isa? port 0x2a0 tty irq 10 vector stlintr
device		stli0	at isa? port 0x2a0 tty iomem 0xcc000 flags 23 iosiz 0x1000

# 
# EISA devices:
#
# The EISA bus device is eisa0.  It provides auto-detection and
# configuration support for all devices on the EISA bus.
# 
# The `ahb' device provides support for the Adaptec 174X adapter.
# 
# The `ahc' device provides support for the Adaptec 274X and 284X
# adapters.  The 284X, although a VLB card responds to EISA probes.
#
controller	eisa0
controller	ahb0
controller	ahc0

#
# PCI devices:
#
# The main PCI bus device is `pci'.  It provides auto-detection and
# configuration support for all devices on the PCI bus, using either
# configuration mode defined in the PCI specification.
#
# The `ahc' device provides support for the Adaptec 29/3940(U)(W)
# and motherboard based AIC7870/AIC7880 adapters
#
# The `ncr' device provides support for the NCR 53C810 and 53C825
# self-contained SCSI host adapters.
#
# The `de' device provides support for the Digital Equipment DC21040
# self-contained Ethernet adapter.
#
# The `fpa' device provides support for the Digital DEFPA PCI FDDI
# adapter. pseudo-device fddi is also needed.
#
# The `fxp' device provides support for the Intel EtherExpress Pro/100B
#
# The `vx' device provides support for the 3Com 3c590 and 3c595 ethernet
# adapters.
#
# The PROBE_VERBOSE option enables a long listing of chip set registers
# for supported PCI chip sets (currently only intel Saturn and Mercury).
# 
# The 'meteor' device is a PCI video capture board. It can also have the
# following options:
#   options "METEOR_ALLOC_PAGES=xxx"	preallocate kernel pages for data entry
#	figure (ROWS*COLUMN*BYTES_PER_PIXEL*FRAME+PAGE_SIZE-1)/PAGE_SIZE
#   options METEOR_DEALLOC_PAGES	remove all allocated pages on close(2)
#   options "METEOR_DEALLOC_ABOVE=xxx"	remove all allocated pages above the
#	specified amount. If this value is below the allocated amount no action
#	taken
#
controller	pci0
device		ncr0
device		de0
device		fpa0
device		fxp0
device		vx0
device		meteor0
options		PROBE_VERBOSE

#
# Laptop/Notebook options:
#
# See also:
#  apm under `Miscellaneous hardare'
#  options		PSM_NO_RESET  for the `psm' driver
# above.

# For older notebooks that signal a powerfail condition (external
# power supply dropped, or battery state low) by issuing an NMI:

options		POWERFAIL_NMI	# make it beep instead of panicing
